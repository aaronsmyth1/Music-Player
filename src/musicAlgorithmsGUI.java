
import javax.swing.JOptionPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author TOSHIBA
 */
public class musicAlgorithmsGUI extends javax.swing.JFrame {

    /**
     * Creates new form musicAlgorithmsGUI
     */
    private stackInterface likedPlaylist;
    private linearListInterface rockPlaylist;
    private linearListInterface popPlaylist;  

    public musicAlgorithmsGUI() {
        likedPlaylist = new myStack();
        rockPlaylist = new SLList();
        popPlaylist = new SLList();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        likedMusicNameTF = new javax.swing.JTextField();
        likedMusicGenreTF = new javax.swing.JTextField();
        songNameJLabel = new javax.swing.JLabel();
        songGenreJLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        addBtn = new javax.swing.JButton();
        changePlaylistBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        sizeBtn = new javax.swing.JButton();
        displayBtn = new javax.swing.JButton();
        searchBtn = new javax.swing.JButton();
        repeatBtn = new javax.swing.JButton();
        moveSongBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        likedMusicNameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                likedMusicNameTFActionPerformed(evt);
            }
        });

        songNameJLabel.setText("Song Name");

        songGenreJLabel.setText("Song Genre");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        addBtn.setText("Add");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        changePlaylistBtn.setText("Change playlist");
        changePlaylistBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePlaylistBtnActionPerformed(evt);
            }
        });

        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        sizeBtn.setText("Amount");
        sizeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sizeBtnActionPerformed(evt);
            }
        });

        displayBtn.setText("Display");
        displayBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayBtnActionPerformed(evt);
            }
        });

        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        repeatBtn.setText("Repeat");
        repeatBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                repeatBtnActionPerformed(evt);
            }
        });

        moveSongBtn.setText("Move Song");
        moveSongBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveSongBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(songGenreJLabel)
                            .addComponent(songNameJLabel))
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
                            .addComponent(likedMusicNameTF)
                            .addComponent(likedMusicGenreTF))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addBtn, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(changePlaylistBtn, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(deleteBtn, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(sizeBtn, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(displayBtn, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(searchBtn, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(repeatBtn, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(moveSongBtn)
                        .addGap(2, 2, 2)))
                .addGap(27, 27, 27))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(likedMusicNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(songNameJLabel)
                    .addComponent(addBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(songGenreJLabel)
                    .addComponent(likedMusicGenreTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(changePlaylistBtn))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(deleteBtn)
                        .addGap(18, 18, 18)
                        .addComponent(sizeBtn)
                        .addGap(18, 18, 18)
                        .addComponent(displayBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchBtn)))
                .addGap(18, 18, 18)
                .addComponent(repeatBtn)
                .addGap(12, 12, 12)
                .addComponent(moveSongBtn)
                .addContainerGap(103, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void likedMusicNameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_likedMusicNameTFActionPerformed
        // TODO add your handling code here:


    }//GEN-LAST:event_likedMusicNameTFActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        // TODO add your handling code here:

        jTextArea1.setText("");
        //making a new music object to save name and genre too
        music newMusic = new music();
        newMusic.setMusicName(likedMusicNameTF.getText());
        newMusic.setMusicGenre(likedMusicGenreTF.getText());

        try {
            if (newMusic.getMusicName().isEmpty() || newMusic.getMusicGenre().isEmpty()) {
                jTextArea1.append("Please enter all fields\n");
            } else {
                //adding object to the stack
                likedPlaylist.push(newMusic);
                jTextArea1.append(newMusic.getMusicName() + " was added to the LIKED playlist \n");

                likedMusicNameTF.setText("");
                likedMusicGenreTF.setText("");
            }
        } catch (Exception e) {
            jTextArea1.append("unkown error has occured " + e);
        }


    }//GEN-LAST:event_addBtnActionPerformed

    private void sizeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sizeBtnActionPerformed
        // TODO add your handling code here:

        jTextArea1.setText("");
        refresh();
        try {
            if (likedPlaylist.isEmpty() && rockPlaylist.isEmpty() && popPlaylist.isEmpty()) {
                jTextArea1.append("There is 0 songs in each playlist\n");
            } else {
                //showing the size of each of the playlists using methods from the interface
                int chosenPlaylist = Integer.parseInt(JOptionPane.showInputDialog("1 to view amount of songs in LIKED playlist \n 2 to view amount of songs in ROCK playlist \n 3 to view amount of songs in POP playlist\n"));
                switch (chosenPlaylist) {
                    case 1:
                        jTextArea1.append("There are " + likedPlaylist.size() + " songs in your LIKED playlist!\n");
                        break;
                    case 2:
                        jTextArea1.append("There are " + rockPlaylist.size() + " songs in your ROCK playlist!\n");
                        break;
                    case 3:
                        jTextArea1.append("There are " + popPlaylist.size() + " songs in your POP playlist!\n");
                        break;
                    default:
                        jTextArea1.append("ERROR: enter 1 for liked playlist\n 2 for for rock playlist\n 3 for pop playlist\n");
                        break;
                }
            }
        } catch (Exception e) {
            jTextArea1.append("unkown error has occured " + e);
        }


    }//GEN-LAST:event_sizeBtnActionPerformed

    private void displayBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayBtnActionPerformed
        // TODO add your handling code here:
        jTextArea1.setText("");
        refresh();
        try {
            if (likedPlaylist.isEmpty() && rockPlaylist.isEmpty() && popPlaylist.isEmpty()) {
                jTextArea1.append("There are no songs to display\n");
            } else {
                //displaying songs in each of the respective playlists using methods from the interface
                int chosenPlaylist = Integer.parseInt(JOptionPane.showInputDialog("1 to view songs in LIKED playlist \n 2 to view songs in ROCK playlist \n 3 to view songs in POP playlist"));
                switch (chosenPlaylist) {
                    case 1:
                        if (likedPlaylist.isEmpty()) {
                            jTextArea1.append("liked playlist is empty\n");
                        } else {
                            jTextArea1.append(likedPlaylist.displayStack());
                        }
                        break;
                    case 2:
                        if (rockPlaylist.isEmpty()) {
                            jTextArea1.append("rock playlist is empty\n");
                        } else {
                            jTextArea1.append(rockPlaylist.printList());
                        }
                        break;
                    case 3:
                        if (popPlaylist.isEmpty()) {
                            jTextArea1.append("pop playlist is empty\n");
                        } else {
                            jTextArea1.append(popPlaylist.printList());
                        }
                        break;
                    default:
                        jTextArea1.append("ERROR: enter 1 for liked playlist\n 2 for for rock playlist\n 3 for pop playlist\n");
                        break;
                }
            }
        } catch (Exception e) {
            jTextArea1.append("unkown error has occured " + e);
        }


    }//GEN-LAST:event_displayBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
        jTextArea1.setText("");
        refresh();
        try {
            if (likedPlaylist.isEmpty() && rockPlaylist.isEmpty() && popPlaylist.isEmpty()) {
                jTextArea1.append("There are no songs to delete\n");
            } else {
                //deleting the songs from the playlists search functions works similarly just doesnt delete the song 
                int chosenPlaylist = Integer.parseInt(JOptionPane.showInputDialog("1 to delete songs in LIKED playlist \n 2 to delete songs in ROCK playlist \n 3 to delete songs in POP playlist"));
                switch (chosenPlaylist) {
                    case 1:
                        if (likedPlaylist.isEmpty()) {
                            jTextArea1.append("There are no songs to delete from LIKED playlist\n");
                        } else {
                            //casting the likedplaylist to return a music type object
                            //making a deletedMusic, music object so i could output the name of the deleted song to the user
                            //due to the structure of a stack only letting you delete the top-most song
                            music deletedLikedMusic = (music) likedPlaylist.pop();
                            String deletedLikedMusicName = deletedLikedMusic.getMusicName();

                            jTextArea1.append(deletedLikedMusicName + " was deleted from LIKED playlist\n");
                        }
                        break;
                    case 2:

                        if (rockPlaylist.isEmpty()) {
                            jTextArea1.append("There are no songs to delete from ROCK playlist\n");
                        } else {
                            //letting the user input the name of the song they want to delete, then iterating through the array until that song is found
                            //if its found rockChosenSongFound is set to true so its can output to user that the action is completed
                            String deleteRockMusicName = null;
                            String deleteRockMusicGenre = null;
                            String rockChosenSong = JOptionPane.showInputDialog("Chose the song you want to delete by their name in the ROCK playlist");
                            boolean rockChosenSongFound = false;
                            for (int i = 1; i < rockPlaylist.size() + 1; i++) {
                                music deleteRockMusic = (music) rockPlaylist.get(i);
                                String currentRockMusicName = deleteRockMusic.getMusicName();

                                if (currentRockMusicName.equalsIgnoreCase(rockChosenSong)) {
                                    rockChosenSongFound = true;
                                    deleteRockMusicName = currentRockMusicName;
                                    deleteRockMusicGenre = deleteRockMusic.getMusicGenre();
                                    rockPlaylist.remove(i);
                                    break;
                                }
                            }
                            if (rockChosenSongFound == true) {
                                jTextArea1.append(deleteRockMusicName + " was deleted from ROCK playlist\n");
                            } else {
                                jTextArea1.append("Song not found\n");
                            }
                        }

                        break;
                    case 3:
                        if (popPlaylist.isEmpty()) {
                            jTextArea1.append("There are no songs to delete from POP playlist\n");
                        } else {
                            //Same is done for popPlaylist as rockPlaylist
                            String deletePopMusicName = null;
                            String deletePopMusicGenre = null;
                            String popChosenSong = JOptionPane.showInputDialog("Chose the song you want to delete by their name in the POP playlist");
                            boolean popChosenSongFound = false;
                            for (int i = 1; i < popPlaylist.size() + 1; i++) {

                                music deletePopMusic = (music) popPlaylist.get(i);
                                String currentPopMusicName = deletePopMusic.getMusicName();

                                if (currentPopMusicName.equalsIgnoreCase(popChosenSong)) {
                                    popChosenSongFound = true;
                                    deletePopMusicName = currentPopMusicName;
                                    deletePopMusicGenre = deletePopMusic.getMusicGenre();
                                    popPlaylist.remove(i);
                                    break;
                                }
                            }
                            if (popChosenSongFound == true) {
                                jTextArea1.append(deletePopMusicName + " was deleted from POP playlist\n");

                            } else {
                                jTextArea1.append("Song not found\n");
                            }
                        }

                        break;
                    default:

                        jTextArea1.append("ERROR: enter 1 for liked playlist\n 2 for for rock playlist\n 3 for pop playlist\n");
                        break;

                }
            }
        } catch (Exception e) {
            jTextArea1.append("unkown error has occured " + e);
        }


    }//GEN-LAST:event_deleteBtnActionPerformed

    private void changePlaylistBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePlaylistBtnActionPerformed
        // TODO add your handling code here:
        jTextArea1.setText("");
        if (likedPlaylist.isEmpty()) {
            jTextArea1.append("There are no songs to move\n");
        } else {
            try {
                //transfering the top song from the stack, to a variable that i can then transfer to the rock or pop playlist, i then remove it from the liked playlist once itr transfered
                music nextMusic = (music) likedPlaylist.frontElement();
                String musicName = nextMusic.getMusicName();
                String musicGenre = nextMusic.getMusicGenre();

                int genreSelected = Integer.parseInt(JOptionPane.showInputDialog("Choose what playlist you would like to move " + musicName + " to 1 for rock 2 for pop"));
                if (genreSelected == 1) {

                    music rockMusic = new music();
                    rockMusic.setMusicName(musicName);
                    rockMusic.setMusicGenre(musicGenre);

                    //adding the first element to the one index, which the head of the SLL
                    rockPlaylist.add(1, rockMusic);
                    jTextArea1.append(musicName + " was added to the ROCK playlist\n");

                    likedPlaylist.pop();
                } else if (genreSelected == 2) {
                    music popMusic = new music();
                    popMusic.setMusicName(musicName);
                    popMusic.setMusicGenre(musicGenre);
                    popPlaylist.add(1, popMusic);
                    jTextArea1.append(musicName + " was added to the POP playlist\n");
                    likedPlaylist.pop();
                } else {
                    jTextArea1.append("ERROR:Please enter 1 or 2\n");

                }

            } catch (Exception e) {
                jTextArea1.append("unkown error has occured " + e);
            }

        }
        refresh();
    }

    public void refresh() {

        jTextArea1.removeAll();
        jTextArea1.repaint();
        jTextArea1.revalidate();


    }//GEN-LAST:event_changePlaylistBtnActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // TODO add your handling code here:
        jTextArea1.setText("");
        try {
            if (likedPlaylist.isEmpty() && rockPlaylist.isEmpty() && popPlaylist.isEmpty()) {
                jTextArea1.append("There are no songs to search\n");
            } else {
                int chosenPlaylist = Integer.parseInt(JOptionPane.showInputDialog("1 to search songs in LIKED playlist \n 2 to search songs in ROCK playlist \n 3 to search songs in POP playlist\n"));
                switch (chosenPlaylist) {
                    case 1:
                        if (likedPlaylist.isEmpty()) {
                            jTextArea1.append("There are no songs to search from LIKED playlist\n");
                        } else {
                            //search function works similarly to the delete function
                            music searchLikedMusic = (music) likedPlaylist.frontElement();
                            String searchLikedMusicName = searchLikedMusic.getMusicName();
                            jTextArea1.append(searchLikedMusicName + " is the most recently added to your liked playlist\n");
                        }
                        break;
                    case 2:

                        if (rockPlaylist.isEmpty()) {
                            jTextArea1.append("There are no songs to search from ROCK playlist\n");
                        } else {
                            String searchRockMusicName = null;
                            String searchRockMusicGenre = null;
                            String rockChosenSong = JOptionPane.showInputDialog("Chose the song you want to search by their name in the POP playlist");
                            boolean rockChosenSongFound = false;
                            for (int i = 1; i < rockPlaylist.size() + 1; i++) {

                                music searchRockMusic = (music) rockPlaylist.get(i);

                                String currentRockMusicName = searchRockMusic.getMusicName();

                                if (currentRockMusicName.equalsIgnoreCase(rockChosenSong)) {
                                    rockChosenSongFound = true;
                                    searchRockMusicName = currentRockMusicName;
                                    searchRockMusicGenre = searchRockMusic.getMusicGenre();
                                    break;
                                }
                            }
                            if (rockChosenSongFound == true) {
                                jTextArea1.append("Name:" + searchRockMusicName + " Genre: " + searchRockMusicGenre + "\n");
                            } else {
                                jTextArea1.append("Song not found\n");
                            }
                        }

                        break;

                    case 3:
                        if (popPlaylist.isEmpty()) {
                            jTextArea1.append("There are no songs to search from POP playlist\n");
                        } else {
                            String searchPopMusicName = null;
                            String searchPopMusicGenre = null;
                            String popChosenSong = JOptionPane.showInputDialog("Chose the song you want to search by their name in the POP playlist");
                            boolean popChosenSongFound = false;
                            for (int i = 1; i < popPlaylist.size() + 1; i++) {
                                music searchPopMusic = (music) popPlaylist.get(i);
                                String currentPopMusicName = searchPopMusic.getMusicName();

                                if (currentPopMusicName.equalsIgnoreCase(popChosenSong)) {
                                    popChosenSongFound = true;
                                    searchPopMusicName = currentPopMusicName;
                                    searchPopMusicGenre = searchPopMusic.getMusicGenre();
                                    break;
                                }
                            }
                            if (popChosenSongFound == true) {
                                jTextArea1.append("Name:" + searchPopMusicName + " Genre: " + searchPopMusicGenre + "\n");
                            } else {
                                jTextArea1.append("Song not found\n");
                            }
                        }

                        break;
                    default:
                        jTextArea1.append("ERROR: enter 1 for liked playlist\n 2 for for rock playlist\n 3 for pop playlist\n");
                        break;

                }
            }
        } catch (Exception e) {
            jTextArea1.append("unkown error has occured " + e);
        }


    }//GEN-LAST:event_searchBtnActionPerformed

    private void repeatBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_repeatBtnActionPerformed
        // TODO add your handling code here:
        jTextArea1.setText("");

        if (popPlaylist.isEmpty()) {
            jTextArea1.append("pop playlist is empty\n");
        } else {
            //prompting the user to set how many times they wouldlike the pop playlist for
            int chosenRepeats = Integer.parseInt(JOptionPane.showInputDialog("Choose how many times you would like to repeat the POP plalist\n"));
            int count = 0;
            String currentPopMusicName;
            String currentPopMusicGenre;
            
            while (count != chosenRepeats){
                for (int i = 1; i < popPlaylist.size() + 1; i++) {
                    music repeatPopMusic = (music) popPlaylist.get(i);
                    currentPopMusicName = repeatPopMusic.getMusicName();
                    currentPopMusicGenre = repeatPopMusic.getMusicGenre();
                    //append the song at (i)'s name and genre to the textarea does this for all songs in popPlaylist
                    //once all songs in the popPlaylist have been printed it increments the count and does it again
                    //until count = chosenRepeats
                    jTextArea1.append("Name:" + currentPopMusicName + " Genre: " + currentPopMusicGenre + " is currently playing\n");

                }
                count++;
            }
        }

    }//GEN-LAST:event_repeatBtnActionPerformed

    private void moveSongBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveSongBtnActionPerformed
        // TODO add your handling code here:
        jTextArea1.setText("");
        try {
            if (rockPlaylist.isEmpty() && popPlaylist.isEmpty()) {
                jTextArea1.append("There are no songs to change\n");
            } else {
                int chosenPlaylist = Integer.parseInt(JOptionPane.showInputDialog("1 to move songs in ROCK playlist \n 2 to move songs in POP playlist\n"));
                switch (chosenPlaylist) {
                    case 1:
                        moveSongInPlaylist(rockPlaylist);
                        break;
                    case 2:
                        moveSongInPlaylist(popPlaylist);
                        break;
                    default:
                        jTextArea1.append("ERROR: 1 for for rock playlist\n 2 for pop playlist\n");
                        break;
                }
            }
        } catch (Exception e) {
            jTextArea1.append("unknown error has occurred " + e);
        }
    }

    private void moveSongInPlaylist(linearListInterface playlist) {
        if (playlist.isEmpty()) {
            jTextArea1.append("There are no songs in the playlist.\n");
            return;
        }

        // Prompting the user to enter the current and new index
        int currentIndex = Integer.parseInt(JOptionPane.showInputDialog("Enter the current index of the song: "));
        int newIndex = Integer.parseInt(JOptionPane.showInputDialog("Enter the new index for the song: "));

        // Check if the indices are within bounds
        if (currentIndex < 1 || currentIndex > playlist.size() || newIndex < 1 || newIndex > playlist.size()) {
            jTextArea1.append("Invalid indices. Please enter valid indices.\n");
            return;
        }

        // Get the song at the current index
        music songToMove = playlist.get(currentIndex);

        // Remove the song from the current index
        playlist.remove(currentIndex);

        // Adjust the newIndex if the song is being moved to an index after the current position
        if (newIndex > currentIndex) {
            newIndex--;
        }
        
        playlist.add(newIndex, songToMove);
        jTextArea1.append("Song moved successfully.\n");


    }//GEN-LAST:event_moveSongBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(musicAlgorithmsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(musicAlgorithmsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(musicAlgorithmsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(musicAlgorithmsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new musicAlgorithmsGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JButton changePlaylistBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton displayBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField likedMusicGenreTF;
    private javax.swing.JTextField likedMusicNameTF;
    private javax.swing.JButton moveSongBtn;
    private javax.swing.JButton repeatBtn;
    private javax.swing.JButton searchBtn;
    private javax.swing.JButton sizeBtn;
    private javax.swing.JLabel songGenreJLabel;
    private javax.swing.JLabel songNameJLabel;
    // End of variables declaration//GEN-END:variables
}
